pipeline {
    agent any
    environment {
        PLATFORM = 'linux_amd64'
        BIN_PATH = '/var/lib/jenkins/.local/bin'
    }
    parameters {
        string(name: 'EKS_CLUSTER_NAME', defaultValue: 'fpeksclr10714', description: 'EKS Cluster Name')
    }
    stages {
        stage('Install kubectl') {
            steps {
                echo "Installing eksctl"
                sh 'curl -O "https://s3.us-west-2.amazonaws.com/amazon-eks/1.33.0/2025-05-01/bin/linux/amd64/kubectl"'
                sh 'chmod +x ./kubectl'
                sh 'mkdir -p ~/.local/bin'
                sh 'mv ./kubectl ~/.local/bin/kubectl'
                echo "Getting kubectl version"
                sh '${BIN_PATH}/kubectl version --client=true'
            }
        }
        stage('INSTALL EKSCTL') {
            steps {
                script {
                    echo "Install eksctl"
                    sh 'curl -sLO "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_${PLATFORM}.tar.gz"'
                    sh 'tar -xzf eksctl_$PLATFORM.tar.gz -C /tmp && rm eksctl_$PLATFORM.tar.gz'
                    sh 'mv /tmp/eksctl ~/.local/bin/eksctl'
                    echo "Checking eksctl version"
                    sh '${BIN_PATH}/eksctl version'
                }
            }
        }
        stage('Install helm') {
            steps {          
                echo "Installing Helm"
                sh 'curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3'
                sh 'chmod 700 get_helm.sh'
                sh '${BIN_PATH}/get_helm.sh'
                echo "Getting helm version"
                sh '${BIN_PATH}/helm list'
            }
        }
        stage('DEPLOY TO K8S') {
            steps {
                echo "Provide AWS credential"
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'aws-eks-cred'
                ]]) {
                    echo "Install App through kubectl"
                    sh 'aws eks update-kubeconfig --region us-east-1 --name ${EKS_CLUSTER_NAME}'
		    sh 'helm install database-server oci://registry-1.docker.io/bitnamicharts/mariadb'	
                    sh '${BIN_PATH}/kubectl apply -f k8s-config/api-deployment.yaml'
                    sh '${BIN_PATH}/kubectl apply -f k8s-config/web-deployment.yaml'
		    sh '${BIN_PATH}/kubectl apply -f k8s-config/api-service.yaml'
		    sh '${BIN_PATH}/kubectl apply -f k8s-config/web-service.yaml'
		    sh '${BIN_PATH}/kubectl apply -f k8s-config/maria-db-init.yaml'
                    echo "Check App status"
                    sh '${BIN_PATH}/kubectl get svc'
                }
            }
        }
    }
}
