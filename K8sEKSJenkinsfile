            
pipeline {
    agent any
    environment {
        PLATFORM = 'linux_amd64'
        BIN_PATH = '/var/lib/jenkins/.local/bin'
    }
    parameters {
        string(name: 'EKS_CLUSTER_NAME', defaultValue: 'AWS-Final-project-ekscluster-0714', description: 'EKS Cluster Name')
    }
    stages {
        stage('Install kubectl') {
            steps {
                echo "Installing kubectl"
                sh 'curl -O "https://s3.us-west-2.amazonaws.com/amazon-eks/1.33.0/2025-05-01/bin/linux/amd64/kubectl"'
                sh 'chmod +x ./kubectl'
                sh 'mkdir -p ~/.local/bin'
                sh 'mv ./kubectl ~/.local/bin/kubectl'
                echo "Getting kubectl version"
                sh '${BIN_PATH}/kubectl version --client=true'
            }
        }
        stage('Install eksctl') {
            steps {
                script {
                    echo "Installing eksctl"
                    sh 'curl -sLO "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_${PLATFORM}.tar.gz"'
                    sh 'tar -xzf eksctl_$PLATFORM.tar.gz -C /tmp && rm eksctl_$PLATFORM.tar.gz'
                    sh 'mv /tmp/eksctl ~/.local/bin/eksctl'
                    echo "Checking eksctl version"
                    sh '${BIN_PATH}/eksctl version'
                }
            }
        }
        stage('Create EKS Cluster') {
            when {
                expression {
                    // check if the cluster exists, if it does, skip this stage
                    try {
                        withCredentials([[
                            $class: 'AmazonWebServicesCredentialsBinding',
                            credentialsId: 'aws-eks-cred'
                        ]]) {
                            sh 'aws eks describe-cluster --name ${EKS_CLUSTER_NAME} --region us-east-1'
                        }
                        catchError(buildResult: 'SUCCESS', stageResult: 'SUCCESS') {
                            // if the cluster exists, this will not throw an error
                            echo "EKS Cluster already exists, skipping creation"
                            // return false to skip the stage
                            return false
                        }
                        return false // cluster exists, skip creation
                    } catch (Exception e) {
                        return true // cluster does not exist, proceed with creation
                    }
                }
            }
            steps {
                echo "Creating EKS Cluster"
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'aws-eks-cred'
                ]]) {
                    sh '${BIN_PATH}/eksctl create cluster -f /ekscluster/cluster-config.yaml'
                }
            }
        }
        stage('Update kubeconfig') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'aws-eks-cred'
                ]]) {
                    echo "Updating kubeconfig"
                    sh 'aws eks update-kubeconfig --region us-east-1 --name ${EKS_CLUSTER_NAME}'
                    sh '${BIN_PATH}/kubectl cluster-info'
                }
            }
        }
    }
}
